package grevend.persistence.lite;

import grevend.persistence.lite.dao.Dao;
import grevend.persistence.lite.database.Database;
import grevend.persistence.lite.entity.Attribute;
import grevend.persistence.lite.entity.Entity;
import grevend.persistence.lite.util.AutoGenerated;
import grevend.persistence.lite.util.PrimaryKey;

import java.util.Map;
import java.util.Optional;

public class Main {

    public static void main(String[] args) {
        Database db = Persistence.inMemoryDatabaseBuilder("postgres", 0)
                .setCredentials("postgres", "mypassword")
                .build();

        /*try (Connection connection = db.createConnection()) {
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM artist");
            while (rs.next()) {
                System.out.println(db.getEntityManager().constructEntity(Artist.class, rs));
            }
            rs.close();
            st.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }*/

        /*var artistDao = db.getDaoFactory().ofEntity(Artist.class);
        System.out.println(artistDao.retrieve(0));
        List<Artist> artists = artistDao.retrieveAll();
        System.out.println(artists);

        Dao<Artist, Integer> d1 = db.getDaoFactory().ofEntity(Artist.class);
        var d2 = db.getDaoFactory().ofEntity(Artist.class);

        Dao<Artist2, List<Class<?>>> d3 = db.getDaoFactory().ofEntity(Artist2.class);
        var d4 = db.getDaoFactory().ofEntity(Artist2.class);*/

        Dao<Artist, Integer> artistDao = db.getDaoFactory().ofEntity(Artist.class);

        artistDao.create(new Artist(50, "test", "biotest", null, Optional.empty()));

        System.out.println(artistDao.retrieveAll());
        System.out.println(artistDao.retrieve(Map.of("id", 49)));
        Optional<Artist> artist = artistDao.retrieve(Map.of("id", 50));
        System.out.println(artist);
        System.out.println(artistDao.retrieve(49));
        System.out.println(artistDao.retrieve(50));
        artist.get().name = "newartistname";
        artistDao.update(artist.get());
        System.out.println(artistDao.retrieveAll().size());
        System.out.println(artistDao.retrieve(artist.get().id));
        System.out.println(artistDao.retrieveAll().size());
    }

    @Entity(name = "artist")
    private static class Artist {

        @PrimaryKey
        @AutoGenerated
        @Attribute(name = "id")
        public int id;
        public String name, bio;
        public Object verifier;
        public Optional<Object> image;

        protected Artist() {
        }

        public Artist(int id, String name, String bio, Object verifier, Optional<Object> image) {
            this.id = id;
            this.name = name;
            this.bio = bio;
            this.verifier = verifier;
            this.image = image;
        }

        @Override
        public String toString() {
            return "Artist{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", bio='" + bio + '\'' +
                    ", image=" + image +
                    ", verifier=" + verifier +
                    '}';
        }

    }

    @Entity(name = "artist2")
    private static class Artist2 {

        @PrimaryKey
        public int id_int;
        @PrimaryKey
        public String id_str;

        protected Artist2() {
        }

    }

}
