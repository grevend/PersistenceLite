/*
 * MIT License
 *
 * Copyright (c) 2020 David Greven
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package grevend.persistencelite.entity;

import static grevend.persistencelite.PersistenceLite.LOGGER;

import java.lang.System.Logger.Level;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.RecordComponent;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

final class EntityLookup {

    @NotNull
    static <E> Collection<EntityProperty> lookupProperties(@NotNull EntityMetadata<E> entityMetadata) {
        return switch (entityMetadata.getEntityType()) {
            case CLASS -> List.of();
            case INTERFACE -> lookupInterfaceProperties(entityMetadata);
            case RECORD -> lookupRecordProperties(entityMetadata);
        };
    }

    @NotNull
    private static <E> Collection<EntityProperty> lookupRecordProperties(@NotNull EntityMetadata<E> entityMetadata) {
        var lookup = MethodHandles.lookup();
        return Stream.of(entityMetadata.getEntityClass().getRecordComponents()).map(
            component -> new EntityProperty(component.getType(),
                lookupRecordGetter(lookup, entityMetadata, component), component.getName(),
                (component.isAnnotationPresent(Property.class) ? component
                    .getAnnotation(Property.class).name() : component.getName()),
                component.isAnnotationPresent(Property.class) && component
                    .getAnnotation(Property.class).autoGenerated(),
                component.isAnnotationPresent(Id.class),
                component.isAnnotationPresent(Id.class) || (
                    component.isAnnotationPresent(Property.class) && component
                        .getAnnotation(Property.class).copy())))
            .collect(Collectors.toUnmodifiableList());
    }

    @Nullable
    private static <E> MethodHandle lookupRecordGetter(@NotNull MethodHandles.Lookup lookup, @NotNull EntityMetadata<E> entityMetadata, @NotNull RecordComponent component) {
        try {
            MethodType methodType = MethodType.methodType(component.getType());
            return lookup
                .findVirtual(entityMetadata.getEntityClass(), component.getName(), methodType);
        } catch (NoSuchMethodException | IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @NotNull
    private static <E> Collection<EntityProperty> lookupInterfaceProperties(@NotNull EntityMetadata<E> entityMetadata) {
        var lookup = MethodHandles.lookup();
        return Stream.of(entityMetadata.getEntityClass().getDeclaredMethods()).filter(
            method -> method.getParameterCount() == 0 && !method.isDefault() && !method.isBridge()
                && !method.isVarArgs() && !method.isSynthetic() && !Modifier
                .isStatic(method.getModifiers()) && !method.isAnnotationPresent(Ignore.class)).map(
            method -> new EntityProperty(method.getReturnType(),
                lookupInterfaceGetter(lookup, entityMetadata, method), method.getName(),
                (method.isAnnotationPresent(Property.class) ? method.getAnnotation(Property.class)
                    .name() : method.getName()),
                method.isAnnotationPresent(Property.class) && method.getAnnotation(Property.class)
                    .autoGenerated(), method.isAnnotationPresent(Id.class),
                method.isAnnotationPresent(Id.class) || (method.isAnnotationPresent(Property.class)
                    && method.getAnnotation(Property.class).copy())))
            .collect(Collectors.toUnmodifiableList());
    }

    @Nullable
    private static <E> MethodHandle lookupInterfaceGetter(@NotNull MethodHandles.Lookup lookup, @NotNull EntityMetadata<E> entityMetadata, @NotNull Method method) {
        try {
            return lookup.unreflect(method);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Nullable
    @Contract(pure = true)
    static <E> MethodHandle lookupConstructor(@NotNull EntityMetadata<E> entityMetadata) {
        return switch (entityMetadata.getEntityType()) {
            case CLASS, INTERFACE -> null;
            case RECORD -> lookupRecordConstructor(entityMetadata);
        };
    }

    @Nullable
    @Contract(pure = true)
    private static <E> MethodHandle lookupRecordConstructor(@NotNull EntityMetadata<E> entityMetadata) {
        try {
            var lookup = MethodHandles.lookup();
            MethodType methodType = MethodType.methodType(void.class,
                entityMetadata.getProperties().stream().map(EntityProperty::type)
                    .collect(Collectors.toUnmodifiableList()));
            return lookup.findConstructor(entityMetadata.getEntityClass(), methodType);
        } catch (NoSuchMethodException | IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @NotNull
    static <E> Collection<EntityMetadata<?>> lookupSuperTypes(@NotNull EntityMetadata<E> entityMetadata) {
        return switch (entityMetadata.getEntityType()) {
            case CLASS, INTERFACE -> List.of();
            case RECORD -> lookupRecordSuperTypes(entityMetadata);
        };
    }

    @NotNull
    private static <E> Collection<EntityMetadata<?>> lookupRecordSuperTypes(@NotNull EntityMetadata<E> entityMetadata) {
        return Stream.of(entityMetadata.getEntityClass().getInterfaces())
            .filter(superType -> superType.isAnnotationPresent(Entity.class))
            .map(EntityMetadata::of).peek(metadata -> {
                System.out.println(metadata.toStructuredString());
                LOGGER.log(Level.DEBUG,
                    metadata.getName() + " is " + (metadata.isValid() ? "a valid" : "an invalid")
                        + " entity");
            })
            .collect(Collectors.toList());
    }

}
