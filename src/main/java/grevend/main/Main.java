/*
 * MIT License
 *
 * Copyright (c) 2020 David Greven
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package grevend.main;

import grevend.common.Lazy;
import grevend.persistencelite.PersistenceLite;
import grevend.persistencelite.entity.Entity;
import grevend.persistencelite.entity.EntityMetadata;
import grevend.persistencelite.entity.Id;
import grevend.persistencelite.entity.Property;
import grevend.persistencelite.entity.Relation;
import grevend.persistencelite.service.sql.PostgresService;
import java.time.LocalDate;
import java.util.Collection;
import java.util.Map;

public class Main {

    public static void main(String[] args) {
        /*System.out.println(
            List.of(DiscordCredential.class, Author.class, Pet.class, Dog.class, Cat.class,
                Book.class).stream()
                .map(EntityMetadata::of)
                .map(EntityMetadata::inferRelationTypes)
                .flatMap(entityMetadata -> entityMetadata.getDeclaredRelations().stream())
                .map(EntityProperty::relation)
                .map(Objects::toString)
                .collect(Collectors.joining(System.lineSeparator())));*/

        var service = PersistenceLite.configure(PostgresService.class)
            .credentials("credentials.properties").service();

        try {
            var tr = service.transactionFactory().createTransaction();
            var discordCredentialsDao = service.createDao(DiscordCredential.class, tr);
            //discordCredentialsDao.create(new DiscordCredential("name", "#4871", "1234", null));

            System.out.println(discordCredentialsDao.retrieveAll());

            var authorDao = service.createDao(Author.class);
            /*authorDao.create(
                new Author(8, "First", "Middle", "Last", LocalDateTime.now(), "name", "#4871",
                    List.of(), null, List.of()));*/

            System.out.println(authorDao.retrieveAll());

            authorDao.retrieveAll()
                .forEach(author -> author.pets()
                    .forEach(System.out::println));

            var catDao = service.createDao(Cat.class);
            //catDao.create(new Cat(1, "Cat", Status.DEAD, 8, true));

            System.out.println(EntityMetadata.of(Dog.class).uniqueProperties());
            var dogDao = service.createDao(Dog.class);
            //dogDao.create(new Dog(27, "Test", Status.ALIVE, 8, false));

            var dogs = dogDao.retrieveByProps(Map.of("name", "Test"));
            System.out.println(dogs);

            System.out.println(dogDao.retrieveAll());

            var bookDao = service.createDao(Book.class);
            //bookDao.create(new Book("1-56619-909-3", "Test Title", List.of()));

            var book = bookDao.retrieveById(Map.of("isbn", "1-56619-909-3"));
            System.out.println(book);
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    public enum Status {
        ALIVE, DEAD;
    }

    @Entity(name = "pet")
    public interface Pet {

        @Id
        int id();

        @Property(name = "status")
        Status status();

        String name();

        @Property(name = "owner_id")
        int ownerId();

    }

    @Entity(name = "discord_credential")
    public record DiscordCredential(
        @Id @Property(name = "display_name")
        String displayName,
        @Id @Property(name = "tag_number")
        String tagNumber,
        String password,
        @Relation(selfProperties = {"display_name",
            "tag_number"}, targetEntity = Author.class, targetProperties = {"discord_name",
            "discord_tag"})
        Lazy<Author>author
    ) {}

    @Entity(name = "author")
    public record Author(
        @Id(autoGenerated = true)
        int id,
        @Property(name = "first_name")
        String firstName,
        @Property(name = "middle_name")
        String middleName,
        @Property(name = "last_name")
        String lastName,
        @Property(name = "date_of_birth")
        LocalDate dateOfBirth,
        @Property(name = "discord_name")
        String nameType,
        @Property(name = "discord_tag")
        String tagType,
        @Relation(selfProperties = "id", targetEntity = Pet.class, targetProperties = "owner_id")
        Collection<Pet>pets,
        @Relation(selfProperties = {"discord_name",
            "discord_tag"}, targetEntity = DiscordCredential.class, targetProperties = {
            "display_name", "tag_number"})
        Lazy<DiscordCredential>discordCredential,
        @Relation(selfProperties = "placeholder", targetEntity = Book.class, targetProperties = "placeholder")
        Collection<Book>books
    ) {}

    @Entity(name = "dog")
    public record Dog(
        @Id
        int id,
        String name,
        Status status,
        @Property(name = "owner_id")
        int ownerId,
        @Property(name = "trained")
        boolean trained
    ) implements Pet {}

    @Entity(name = "cat")
    public record Cat(
        @Id
        int id,
        String name,
        Status status,
        @Property(name = "owner_id")
        int ownerId,
        @Property(name = "destroy_stuff")
        boolean destroyStuff
    ) implements Pet {}

    @Entity(name = "book")
    public record Book(
        @Id
        String isbn,
        String title,
        @Relation(selfProperties = "placeholder", targetEntity = Author.class, targetProperties = "placeholder")
        Collection<Author>authors
    ) {}

    /*public static void main(String[] args) throws Throwable {
        PostgresService service = new PostgresService();
        var dao = service.createDao(Customer.class);
        var customer = new Customer(21, "Justin", "987654321", "justin@van.com", "Van...", 21);
        dao.create(new Customer(12, "Bob", "123456789", "bob@van.com", "Van...", 12));
        dao.create(customer);
        System.out.println(dao.retrieve());
        System.out.println(dao.retrieve(Map.of("id", 12, "username", "Bob")));
        System.out.println(dao.retrieve(Map.of("id", 13, "username", "Bob")));
        dao.delete(customer);
        System.out.println(dao.retrieve());
        var bob = dao.retrieve(Map.of("id", 12, "username", "Bob"));
        if (bob.isPresent()) {
            dao.update(bob.get(), Map.of("password", "Hello World!"));
        }
        System.out.println(dao.retrieve());

        var service = PersistenceLite.configureService(PostgresService.class)
            .loadCredentials("credentials.properties").service();
    }

    @Entity(name = "account_base")
    public interface AccountBase {

        @Id
        int id();

        @Id
        String username();
    }

    @Entity(name = "account2")
    public interface Account extends AccountBase {

        @Id
        int id();

        @Id
        String username();

        String password();
    }

    @Entity(name = "customer")
    public record Customer(@Id int id, @Id String username, String password, String email, @Property(name = "company_name")String companyName,
                           @Property(name = "account_id")int accountId) implements Account {}*/

}